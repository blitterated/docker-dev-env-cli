#!/usr/bin/env bash

set -e

help_exec() {
  echo "
Command: exec
Usage:
  exec image_name your command string goes here"
  exit 1
}

container_running() {
  [[ $( docker ps | grep ${CID:0:12} | wc -l ) -gt 0 ]]
  return $?
}

[ ! -n "$1" ] && help_exec

IMAGE_NAME=$1
shift

CID_FILE="${CID_DIR}/${IMAGE_NAME}"

# check for an existing container id file
if [[ ! -f "$CID_FILE" ]]; then
  echo "No existing ${IMAGE_NAME} container."
  exit 1
fi

read CID < "$CID_FILE"

# check that the container is running
if ! container_running; then
  echo "No ${IMAGE_NAME} container running."
  exit 1
fi

ADD_COMMAND_PATH='export PATH=/command:${PATH}'

read -d XXX EXEC_JSON <<EOJS
{
  "AttachStdin": false,
  "AttachStdout": true,
  "AttachStderr": true,
  "DetachKeys": "ctrl-p,ctrl-q",
  "Tty": false,
  "Cmd": [
    "bash",
    "-c",
    "${ADD_COMMAND_PATH}; $@"
  ]
}XXX
EOJS

MIN_EXEC_JSON=$(echo "$EXEC_JSON" | jq -c)

EXEC_ID=$(curl -sS -XPOST --unix-socket /var/run/docker.sock \
               -d "${MIN_EXEC_JSON}" \
               -H "Content-Type: application/json" \
                "http://localhost/containers/${CID}/exec" | jq -r ".Id")

curl -sS -XPOST --output - \
     --unix-socket /var/run/docker.sock \
     -d '{"Detach": false, "Tty": false}' \
     -H "Content-Type: application/json" \
     "http://localhost/exec/${EXEC_ID}/start"
